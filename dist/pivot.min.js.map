{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","multiColumnsTableRenderer","multiRowsTableRenderer","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg1","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","mSum","arg","len","summedFacts","multivalue","multivalue2","min","val","Math","max","average","sumOverSum","denom","num","sumNum","sumDenom","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Multi-measure Sum","Average","Minimum","Maximum","Sum over Sum","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Multi Measure Table Rows","Multi Measure Table Columns","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","o","ref1","ref2","ref3","fromCharCode","agg","pivotUtilities","pivotData","c","r","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","colspan_header","colspan_total","mc","n_medidas","tmpAggregator","Object","keys","console","log","len3","len4","len5","len6","len7","len8","n","q","ref4","ref5","ref6","ref7","s","t","u","w","y","pivot","e","dataClass","renderer","rendererOptions","error","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","pivotTable","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","values","nonRed","round","colorScale","forEachCell","elem"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        mSum: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            summedFacts = {}\n            i = 0\n            len = arg.length\n            while (i < len) \n                summedFacts[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]) if not isNaN parseFloat(record[arg[i]]) \n                    i++\n                summedFacts\n            value: -> parseFloat(summedFacts[arg[0]])\n            multivalue: -> summedFacts\n            multivalue2: -> parseFloat(summedFacts)\n            format: formatter\n            numInputs: 10\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Multi-measure Sum\":    tpl.mSum(usFmt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":                    (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Multi Measure Table Rows\": (data, opts) -> multiRowsTableRenderer(data, opts)   \n        \"Multi Measure Table Columns\": (data, opts) -> multiColumnsTableRenderer(data, opts)   \n        \"Heatmap\":                  (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales = \n        en: \n            aggregators: aggregators\n            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the rows\n    ###\n\n    multiRowsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        \n        n_medidas = 1\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length\n        colspan_header++ if n_medidas >= 1\n        console.log(rowAttrs.length);\n        th.setAttribute(\"colspan\", colspan_header);\n        th.setAttribute(\"rowspan\", colAttrs.length);\n        tr.appendChild(th);\n\n        for own j, c of colAttrs\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1) #antigo 2\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild(thead)\n\n            tr = document.createElement(\"tr\") if j != colAttrs.length - 1 #testar\n\n        if colAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            colspan_header = rowAttrs.length\n            colspan_header++ if n_medidas >1\n            th.setAttribute(\"colspan\", colspan_header)\n            tr.appendChild(th)\n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        if rowKeys.length == 0\n            for mc, m of Object.keys(tmpAggregator.multivalue())\n                tr = document.createElement(\"tr\")\n                th = document.createElement(\"th\")\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    colKey = colKeys[j];\n                    aggregator = pivotData.getAggregator([], colKey)\n                    val = aggregator.multivalue()\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row#{i} col#{j}\"\n                    td.textContent = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", val)\n                    tr.appendChild td\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n\n\n        #pra cada dimensao na linha\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            tmpAggregator = pivotData.getAggregator([], []);\n\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n\n                if x==1\n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas;\n                \n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1) #antigo  =2\n                    tr.appendChild th\n\n            for own mc, m of Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtRowLabel\"\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    aggregator = pivotData.getAggregator(rowKey, colKey)\n                    if aggregator.multivalue\n                        val = aggregator.format(aggregator.multivalue()[m])\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n                    else\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n                tr = document.createElement(\"tr\") if mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1\n\n\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        colspan_total = rowAttrs.length;\n        colspan_total++ if n_medidas >= 1\n      \n        th.setAttribute(\"colspan\", colspan_total)\n        tr.appendChild th\n\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n\n            if totalAggregator.multivalue\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                val = 0\n                for m in Object.keys(totalAggregator.multivalue())\n                  val+=totalAggregator.multivalue()[m]\n                \n                td.innerHTML = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td);\n            else\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n\n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m]\n      \n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Renderer for hierarchical table layout with multiple measures on the columns\n    ###\n    multiColumnsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        n_medidas = 1\n\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\"\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        th.setAttribute(\"rowspan\", colAttrs.length+1)\n        tr.appendChild(th)\n\n        for own j, c of colAttrs\n\n            # tr = document.createElement(\"tr\")\n            # if parseInt(j) == 0 and rowAttrs.length != 0\n            #     th = document.createElement(\"th\")\n            #     th.setAttribute(\"colspan\", rowAttrs.length)\n            #     th.setAttribute(\"rowspan\", colAttrs.length)\n            #     tr.appendChild th\n            # th = document.createElement(\"th\")\n            # th.className = \"pvtAxisLabel\"\n            # th.textContent = c\n            # tr.appendChild th\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n\n                if x==1 \n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas\n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1)\n                    tr.appendChild th\n\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", 2)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild thead\n\n            tr = document.createElement(\"tr\")\n\n            #add line for measures\n            if parseInt(j) == colAttrs.length - 1\n                for own i, colKey of colKeys\n                    for m in Object.keys(tmpAggregator.multivalue())\n                        th = document.createElement(\"th\")\n                        th.className = \"pvtColLabel\"\n                        th.textContent = m\n                        th.setAttribute(\"colspan\", 1)\n                        th.setAttribute(\"rowspan\", 1) if parseInt(j) == colAttrs.length - 1 && rowAttrs.length != 0\n                        tr.appendChild(th)\n                thead.appendChild(tr)\n                result.appendChild(thead)\n\n        console.log(colAttrs)\n        if colAttrs.length == 0\n            console.log(\"oi\")\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.setAttribute(\"colspan\", rowAttrs.length)\n            th.setAttribute(\"rowspan\", colAttrs.length+1)\n            tr.appendChild(th);\n            \n            for m in Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtColLabel\"\n                th.textContent = m;\n                th.setAttribute(\"colspan\", 1)\n                tr.appendChild(th)\n            \n            \n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n              \n\n        #then a row for row header headers\n        # if rowAttrs.length !=0\n        #     tr = document.createElement(\"tr\")\n        #     for own i, r of rowAttrs\n        #         th = document.createElement(\"th\")\n        #         th.className = \"pvtAxisLabel\"\n        #         th.textContent = r\n        #         tr.appendChild th \n        #     th = document.createElement(\"th\")\n        #     if colAttrs.length ==0\n        #         th.className = \"pvtTotalLabel\"\n        #         th.innerHTML = opts.localeStrings.totals\n        #     tr.appendChild th\n        #     thead.appendChild tr\n        # result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1)\n                    tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                if aggregator.multivalue\n                    for own mc, m of Object.keys(aggregator.multivalue())\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                        td.setAttribute(\"data-value\", aggregator.format(aggregator.multivalue()[m]))\n                        tr.appendChild(td)\n                else\n                    for n in n_medidas\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n            if colAttrs.length == 0\n                aggregator = pivotData.getAggregator(rowKey, [])\n                for m in Object.keys(aggregator.multivalue())\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row\" + i + \" col\" + j\n                    td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                    tr.appendChild(td)      \n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = 0\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n\n            for m in Object.keys(totalAggregator.multivalue())\n                val+=totalAggregator.multivalue()[m];\n\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n            result.appendChild tbody\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length)\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.multivalue()\n            for m in Object.keys(val)\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.innerHTML = totalAggregator.format(val[m]);\n                td.setAttribute(\"data-value\", val[m])\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td)\n\n        if colAttrs.length == 0\n            aggregator = pivotData.getAggregator([], []);\n            for m in Object.keys(aggregator.multivalue())\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                td.innerHTML = aggregator.format(aggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", aggregator.multivalue()[m])\n                tr.appendChild(td)\n    \n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m];\n\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, multiColumnsTableRenderer, multiRowsTableRenderer, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      mSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          return function(data, rowKey, colKey) {\n            var attr, i, len, summedFacts;\n            attr = arg[0];\n            summedFacts = {};\n            i = 0;\n            len = arg.length;\n            while (i < len) {\n              summedFacts[arg[i]] = 0;\n              i++;\n            }\n            return {\n              push: function(record) {\n                i = 0;\n                while (i < len) {\n                  if (!isNaN(parseFloat(record[arg[i]]))) {\n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]);\n                  }\n                  i++;\n                }\n                return summedFacts;\n              },\n              value: function() {\n                return parseFloat(summedFacts[arg[0]]);\n              },\n              multivalue: function() {\n                return summedFacts;\n              },\n              multivalue2: function() {\n                return parseFloat(summedFacts);\n              },\n              format: formatter,\n              numInputs: 10\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var denom, num;\n          num = arg1[0], denom = arg1[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Multi-measure Sum\": tpl.mSum(usFmt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Multi Measure Table Rows\": function(data, opts) {\n        return multiRowsTableRenderer(data, opts);\n      },\n      \"Multi Measure Table Columns\": function(data, opts) {\n        return multiColumnsTableRenderer(data, opts);\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, o, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref1 = j; 0 <= ref1 ? o <= ref1 : o >= ref1; x = 0 <= ref1 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Renderer for hierarchical table layout with multiple measures on the rows\n     */\n    multiRowsTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, colspan_header, colspan_total, defaults, i, j, l, len1, len2, m, mc, n_medidas, o, ref, ref1, ref2, ref3, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, tmpAggregator, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref1 = j; 0 <= ref1 ? o <= ref1 : o >= ref1; x = 0 <= ref1 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      n_medidas = 1;\n      tmpAggregator = pivotData.getAggregator([], []);\n      if (tmpAggregator.multivalue) {\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length;\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtAxisLabel\";\n      colspan_header = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_header++;\n      }\n      console.log(rowAttrs.length);\n      th.setAttribute(\"colspan\", colspan_header);\n      th.setAttribute(\"rowspan\", colAttrs.length);\n      tr.appendChild(th);\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n        result.appendChild(thead);\n        if (j !== colAttrs.length - 1) {\n          tr = document.createElement(\"tr\");\n        }\n      }\n      if (colAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length;\n        if (n_medidas > 1) {\n          colspan_header++;\n        }\n        th.setAttribute(\"colspan\", colspan_header);\n        tr.appendChild(th);\n        th = document.createElement(\"th\");\n        th.innerHTML = \"Total\";\n        th.className = \"pvtTotalLabel pvtTotalCol\";\n        tr.appendChild(th);\n        thead.appendChild(tr);\n        result.appendChild(thead);\n      }\n      tbody = document.createElement(\"tbody\");\n      if (rowKeys.length === 0) {\n        ref = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref) {\n          m = ref[mc];\n          tr = document.createElement(\"tr\");\n          th = document.createElement(\"th\");\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator([], colKey);\n            val = aggregator.multivalue();\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.textContent = aggregator.format(aggregator.multivalue()[m]);\n            td.setAttribute(\"data-value\", val);\n            tr.appendChild(td);\n          }\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n        }\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        tmpAggregator = pivotData.getAggregator([], []);\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x === 1) {\n            x = n_medidas;\n          } else {\n            if (x !== -1 && n_medidas > 1) {\n              x = x * n_medidas;\n            }\n          }\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        ref1 = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref1) {\n          if (!hasProp.call(ref1, mc)) continue;\n          m = ref1[mc];\n          th = document.createElement(\"th\");\n          th.className = \"pvtRowLabel\";\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator(rowKey, colKey);\n            if (aggregator.multivalue) {\n              val = aggregator.format(aggregator.multivalue()[m]);\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            } else {\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            }\n          }\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n          if (mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1) {\n            tr = document.createElement(\"tr\");\n          }\n        }\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      colspan_total = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_total++;\n      }\n      th.setAttribute(\"colspan\", colspan_total);\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        if (totalAggregator.multivalue) {\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          val = 0;\n          ref2 = Object.keys(totalAggregator.multivalue());\n          for (l = 0, len1 = ref2.length; l < len1; l++) {\n            m = ref2[l];\n            val += totalAggregator.multivalue()[m];\n          }\n          td.innerHTML = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        } else {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = 0;\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      ref3 = Object.keys(totalAggregator.multivalue());\n      for (o = 0, len2 = ref3.length; o < len2; o++) {\n        m = ref3[o];\n        val += totalAggregator.multivalue()[m];\n      }\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Renderer for hierarchical table layout with multiple measures on the columns\n     */\n    multiColumnsTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, l, len1, len2, len3, len4, len5, len6, len7, len8, m, mc, n, n_medidas, o, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, result, rowAttrs, rowKey, rowKeys, s, spanSize, t, tbody, td, th, thead, tmpAggregator, totalAggregator, tr, txt, u, val, w, x, y;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref1 = j; 0 <= ref1 ? o <= ref1 : o >= ref1; x = 0 <= ref1 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      n_medidas = 1;\n      tmpAggregator = pivotData.getAggregator([], []);\n      if (tmpAggregator.multivalue) {\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length;\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtAxisLabel\";\n      th.setAttribute(\"colspan\", rowAttrs.length);\n      th.setAttribute(\"rowspan\", colAttrs.length + 1);\n      tr.appendChild(th);\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x === 1) {\n            x = n_medidas;\n          } else {\n            if (x !== -1 && n_medidas > 1) {\n              x = x * n_medidas;\n            }\n          }\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", 2);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n        result.appendChild(thead);\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === colAttrs.length - 1) {\n          for (i in colKeys) {\n            if (!hasProp.call(colKeys, i)) continue;\n            colKey = colKeys[i];\n            ref = Object.keys(tmpAggregator.multivalue());\n            for (l = 0, len1 = ref.length; l < len1; l++) {\n              m = ref[l];\n              th = document.createElement(\"th\");\n              th.className = \"pvtColLabel\";\n              th.textContent = m;\n              th.setAttribute(\"colspan\", 1);\n              if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n                th.setAttribute(\"rowspan\", 1);\n              }\n              tr.appendChild(th);\n            }\n          }\n          thead.appendChild(tr);\n          result.appendChild(thead);\n        }\n      }\n      console.log(colAttrs);\n      if (colAttrs.length === 0) {\n        console.log(\"oi\");\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.setAttribute(\"colspan\", rowAttrs.length);\n        th.setAttribute(\"rowspan\", colAttrs.length + 1);\n        tr.appendChild(th);\n        ref1 = Object.keys(tmpAggregator.multivalue());\n        for (o = 0, len2 = ref1.length; o < len2; o++) {\n          m = ref1[o];\n          th = document.createElement(\"th\");\n          th.className = \"pvtColLabel\";\n          th.textContent = m;\n          th.setAttribute(\"colspan\", 1);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.innerHTML = \"Total\";\n        th.className = \"pvtTotalLabel pvtTotalCol\";\n        tr.appendChild(th);\n        thead.appendChild(tr);\n        result.appendChild(thead);\n      }\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          if (aggregator.multivalue) {\n            ref2 = Object.keys(aggregator.multivalue());\n            for (mc in ref2) {\n              if (!hasProp.call(ref2, mc)) continue;\n              m = ref2[mc];\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n              td.setAttribute(\"data-value\", aggregator.format(aggregator.multivalue()[m]));\n              tr.appendChild(td);\n            }\n          } else {\n            for (q = 0, len3 = n_medidas.length; q < len3; q++) {\n              n = n_medidas[q];\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            }\n          }\n        }\n        if (colAttrs.length === 0) {\n          aggregator = pivotData.getAggregator(rowKey, []);\n          ref3 = Object.keys(aggregator.multivalue());\n          for (s = 0, len4 = ref3.length; s < len4; s++) {\n            m = ref3[s];\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n            td.setAttribute(\"data-value\", aggregator.multivalue()[m]);\n            tr.appendChild(td);\n          }\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = 0;\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        ref4 = Object.keys(totalAggregator.multivalue());\n        for (t = 0, len5 = ref4.length; t < len5; t++) {\n          m = ref4[t];\n          val += totalAggregator.multivalue()[m];\n        }\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n        result.appendChild(tbody);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length);\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.multivalue();\n        ref5 = Object.keys(val);\n        for (u = 0, len6 = ref5.length; u < len6; u++) {\n          m = ref5[u];\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.innerHTML = totalAggregator.format(val[m]);\n          td.setAttribute(\"data-value\", val[m]);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n      }\n      if (colAttrs.length === 0) {\n        aggregator = pivotData.getAggregator([], []);\n        ref6 = Object.keys(aggregator.multivalue());\n        for (w = 0, len7 = ref6.length; w < len7; w++) {\n          m = ref6[w];\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.innerHTML = aggregator.format(aggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", aggregator.multivalue()[m]);\n          tr.appendChild(td);\n        }\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = 0;\n      ref7 = Object.keys(totalAggregator.multivalue());\n      for (y = 0, len8 = ref7.length; y < len8; y++) {\n        m = ref7[y];\n        val += totalAggregator.multivalue()[m];\n      }\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, s, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, o, results;\n          results = [];\n          for (o = 0, len2 = tblCols.length; o < len2; o++) {\n            c = tblCols[o];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (o = 0, len2 = shownAttributes.length; o < len2; o++) {\n            a = shownAttributes[o];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, q, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (q = 0, len3 = ref2.length; q < len3; q++) {\n              k = ref2[q];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (q = 0, len3 = ref3.length; q < len3; q++) {\n          x = ref3[q];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (s = 0, len4 = ref4.length; s < len4; s++) {\n          x = ref4[s];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref6 = numInputsToProcess; 0 <= ref6 ? t < ref6 : t > ref6; x = 0 <= ref6 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len5 = shownAttributes.length; u < len5; u++) {\n                  attr = shownAttributes[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    return $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, numCols, numRows, o, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = o = 0, ref2 = numCols; 0 <= ref2 ? o < ref2 : o > ref2; j = 0 <= ref2 ? ++o : --o) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}