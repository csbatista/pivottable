{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","multiRowsTableRenderer","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg1","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","mSum","arg","len","summedFacts","multivalue","multivalue2","min","val","Math","max","average","sumOverSum","denom","num","sumNum","sumDenom","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Multi-measure Sum","Average","Minimum","Maximum","Sum over Sum","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Multi Measure Table Rows","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","fromCharCode","agg","pivotUtilities","pivotData","c","colspan_header","colspan_total","mc","n_medidas","spanSize","tbody","td","th","thead","tmpAggregator","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","Object","keys","console","log","setAttribute","appendChild","parseInt","textContent","innerHTML","r","pivot","e","dataClass","renderer","rendererOptions","error","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","s","subopts","t","unusedAttrsContainer","remove","not","excludedItems","ref7","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","values","nonRed","round","colorScale","forEachCell","elem"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        mSum: (formatter=usFmt) -> (arg) -> (data, rowKey, colKey) ->\n            attr = arg[0]\n            summedFacts = {}\n            i = 0\n            len = arg.length\n            while (i < len) \n                summedFacts[arg[i]] = 0\n                i++\n            push: (record) -> \n                i = 0\n                while (i < len) \n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]) if not isNaN parseFloat(record[arg[i]]) \n                    i++\n                summedFacts\n            value: -> parseFloat(summedFacts[arg[0]])\n            multivalue: -> summedFacts\n            multivalue2: -> parseFloat(summedFacts)\n            format: formatter\n            numInputs: 10\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Multi-measure Sum\":    tpl.mSum(usFmt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":                    (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Multi Measure Table Rows\": (data, opts) -> multiRowsTableRenderer(data, opts)   \n        \"Heatmap\":                  (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":              (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales = \n        en: \n            aggregators: aggregators\n            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    multiRowsTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        \n        n_medidas = 1\n        tmpAggregator = pivotData.getAggregator([], [])\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length if tmpAggregator.multivalue\n\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length\n        colspan_header++ if n_medidas >= 1\n        console.log(rowAttrs.length);\n        th.setAttribute(\"colspan\", colspan_header);\n        th.setAttribute(\"rowspan\", colAttrs.length);\n        tr.appendChild(th);\n\n        for own j, c of colAttrs\n\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 1) #antigo 2\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            thead.appendChild tr\n            result.appendChild(thead)\n\n            tr = document.createElement(\"tr\") if j != colAttrs.length - 1 #testar\n\n        if colAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            colspan_header = rowAttrs.length\n            colspan_header++ if n_medidas >1\n            th.setAttribute(\"colspan\", colspan_header)\n            tr.appendChild(th)\n            th = document.createElement(\"th\")\n            th.innerHTML = \"Total\"\n            th.className = \"pvtTotalLabel pvtTotalCol\"\n            tr.appendChild(th)\n            thead.appendChild(tr)\n            result.appendChild(thead)\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        if rowKeys.length == 0\n            for mc, m of Object.keys(tmpAggregator.multivalue())\n                tr = document.createElement(\"tr\")\n                th = document.createElement(\"th\")\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    colKey = colKeys[j];\n                    aggregator = pivotData.getAggregator([], colKey)\n                    val = aggregator.multivalue()\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row#{i} col#{j}\"\n                    td.textContent = aggregator.format(aggregator.multivalue()[m])\n                    td.setAttribute(\"data-value\", val)\n                    tr.appendChild td\n                totalAggregator = pivotData.getAggregator([], [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n\n\n        #pra cada dimensao na linha\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            tmpAggregator = pivotData.getAggregator([], []);\n\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n\n                if x==1\n                    x = n_medidas;\n                else\n                    if x != -1 && n_medidas > 1\n                        x = x*n_medidas;\n                \n\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",1) #antigo  =2\n                    tr.appendChild th\n\n            for own mc, m of Object.keys(tmpAggregator.multivalue())\n                th = document.createElement(\"th\")\n                th.className = \"pvtRowLabel\"\n                th.textContent = m\n                th.setAttribute(\"rowspan\", 1)\n\n                tr.appendChild(th)\n\n                for own j, colKey of colKeys #this is the tight loop\n                    aggregator = pivotData.getAggregator(rowKey, colKey)\n                    if aggregator.multivalue\n                        val = aggregator.format(aggregator.multivalue()[m])\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n                    else\n                        val = aggregator.value()\n                        td = document.createElement(\"td\")\n                        td.className = \"pvtVal row#{i} col#{j}\"\n                        td.textContent = aggregator.format(val)\n                        td.setAttribute(\"data-value\", val)\n                        tr.appendChild td\n\n                totalAggregator = pivotData.getAggregator(rowKey, [])\n                val = totalAggregator.multivalue()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(totalAggregator.multivalue()[m])\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"row\"+i)\n                tr.appendChild td\n                tbody.appendChild tr\n                result.appendChild tbody\n                tr = document.createElement(\"tr\") if mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1\n\n\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        colspan_total = rowAttrs.length;\n        colspan_total++ if n_medidas >= 1\n      \n        th.setAttribute(\"colspan\", colspan_total)\n        tr.appendChild th\n\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n\n            if totalAggregator.multivalue\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row\" + i + \" col\" + j\n                val = 0\n                for m in Object.keys(totalAggregator.multivalue())\n                  val+=totalAggregator.multivalue()[m]\n                \n                td.innerHTML = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\" + j)\n                tr.appendChild(td);\n            else\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                td.setAttribute(\"data-for\", \"col\"+j)\n                tr.appendChild td\n\n        totalAggregator = pivotData.getAggregator([], [])\n        val = 0\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        for m in Object.keys(totalAggregator.multivalue())\n            val+=totalAggregator.multivalue()[m]\n      \n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, multiRowsTableRenderer, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      mSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          return function(data, rowKey, colKey) {\n            var attr, i, len, summedFacts;\n            attr = arg[0];\n            summedFacts = {};\n            i = 0;\n            len = arg.length;\n            while (i < len) {\n              summedFacts[arg[i]] = 0;\n              i++;\n            }\n            return {\n              push: function(record) {\n                i = 0;\n                while (i < len) {\n                  if (!isNaN(parseFloat(record[arg[i]]))) {\n                    summedFacts[arg[i]] += parseFloat(record[arg[i]]);\n                  }\n                  i++;\n                }\n                return summedFacts;\n              },\n              value: function() {\n                return parseFloat(summedFacts[arg[0]]);\n              },\n              multivalue: function() {\n                return summedFacts;\n              },\n              multivalue2: function() {\n                return parseFloat(summedFacts);\n              },\n              format: formatter,\n              numInputs: 10\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var attr;\n          attr = arg1[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg1) {\n          var denom, num;\n          num = arg1[0], denom = arg1[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Multi-measure Sum\": tpl.mSum(usFmt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Multi Measure Table Rows\": function(data, opts) {\n        return multiRowsTableRenderer(data, opts);\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    multiRowsTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, colspan_header, colspan_total, defaults, i, j, l, len1, len2, m, mc, n, n_medidas, ref, ref1, ref2, ref3, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, tmpAggregator, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      n_medidas = 1;\n      tmpAggregator = pivotData.getAggregator([], []);\n      if (tmpAggregator.multivalue) {\n        n_medidas = Object.keys(tmpAggregator.multivalue()).length;\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtAxisLabel\";\n      colspan_header = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_header++;\n      }\n      console.log(rowAttrs.length);\n      th.setAttribute(\"colspan\", colspan_header);\n      th.setAttribute(\"rowspan\", colAttrs.length);\n      tr.appendChild(th);\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n        result.appendChild(thead);\n        if (j !== colAttrs.length - 1) {\n          tr = document.createElement(\"tr\");\n        }\n      }\n      if (colAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        colspan_header = rowAttrs.length;\n        if (n_medidas > 1) {\n          colspan_header++;\n        }\n        th.setAttribute(\"colspan\", colspan_header);\n        tr.appendChild(th);\n        th = document.createElement(\"th\");\n        th.innerHTML = \"Total\";\n        th.className = \"pvtTotalLabel pvtTotalCol\";\n        tr.appendChild(th);\n        thead.appendChild(tr);\n        result.appendChild(thead);\n      }\n      tbody = document.createElement(\"tbody\");\n      if (rowKeys.length === 0) {\n        ref = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref) {\n          m = ref[mc];\n          tr = document.createElement(\"tr\");\n          th = document.createElement(\"th\");\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator([], colKey);\n            val = aggregator.multivalue();\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.textContent = aggregator.format(aggregator.multivalue()[m]);\n            td.setAttribute(\"data-value\", val);\n            tr.appendChild(td);\n          }\n          totalAggregator = pivotData.getAggregator([], []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n        }\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        tmpAggregator = pivotData.getAggregator([], []);\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x === 1) {\n            x = n_medidas;\n          } else {\n            if (x !== -1 && n_medidas > 1) {\n              x = x * n_medidas;\n            }\n          }\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 1);\n            }\n            tr.appendChild(th);\n          }\n        }\n        ref1 = Object.keys(tmpAggregator.multivalue());\n        for (mc in ref1) {\n          if (!hasProp.call(ref1, mc)) continue;\n          m = ref1[mc];\n          th = document.createElement(\"th\");\n          th.className = \"pvtRowLabel\";\n          th.textContent = m;\n          th.setAttribute(\"rowspan\", 1);\n          tr.appendChild(th);\n          for (j in colKeys) {\n            if (!hasProp.call(colKeys, j)) continue;\n            colKey = colKeys[j];\n            aggregator = pivotData.getAggregator(rowKey, colKey);\n            if (aggregator.multivalue) {\n              val = aggregator.format(aggregator.multivalue()[m]);\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            } else {\n              val = aggregator.value();\n              td = document.createElement(\"td\");\n              td.className = \"pvtVal row\" + i + \" col\" + j;\n              td.textContent = aggregator.format(val);\n              td.setAttribute(\"data-value\", val);\n              tr.appendChild(td);\n            }\n          }\n          totalAggregator = pivotData.getAggregator(rowKey, []);\n          val = totalAggregator.multivalue();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(totalAggregator.multivalue()[m]);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"row\" + i);\n          tr.appendChild(td);\n          tbody.appendChild(tr);\n          result.appendChild(tbody);\n          if (mc < Object.keys(tmpAggregator.multivalue())[\"length\"] - 1) {\n            tr = document.createElement(\"tr\");\n          }\n        }\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      colspan_total = rowAttrs.length;\n      if (n_medidas >= 1) {\n        colspan_total++;\n      }\n      th.setAttribute(\"colspan\", colspan_total);\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        if (totalAggregator.multivalue) {\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          val = 0;\n          ref2 = Object.keys(totalAggregator.multivalue());\n          for (l = 0, len1 = ref2.length; l < len1; l++) {\n            m = ref2[l];\n            val += totalAggregator.multivalue()[m];\n          }\n          td.innerHTML = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        } else {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          td.setAttribute(\"data-for\", \"col\" + j);\n          tr.appendChild(td);\n        }\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = 0;\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      ref3 = Object.keys(totalAggregator.multivalue());\n      for (n = 0, len2 = ref3.length; n < len2; n++) {\n        m = ref3[n];\n        val += totalAggregator.multivalue()[m];\n      }\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (t = 0, len5 = shownAttributes.length; t < len5; t++) {\n                  attr = shownAttributes[t];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    return $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}